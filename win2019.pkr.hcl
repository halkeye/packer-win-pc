packer {
  required_version = ">= 1.7.2, < 1.8.0"
  required_plugins {
    windows-update = {
      version = "0.12.0"
      source  = "github.com/rgl/windows-update"
    }
  }
}

# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "blob_webserver" {
  type    = string
  default = "${env("BLOB_WEBSERVER")}"
}

variable "cpu" {
  type    = string
  default = "Westmere"
}

variable "cpus" {
  type    = string
  default = "2"
}

variable "localuser_win_pass" {
  type    = string
  default = "${env("LOCALUSER_WIN_PASS")}"
}

variable "memory" {
  type    = string
  default = "4048"
}

variable "vnc_bind_address" {
  type    = string
  default = "127.0.0.1"
}

variable "wsus_server" {
  type    = string
  default = "${env("WSUS_SERVER")}"
}

variable "wsus_group" {
  type    = string
  default = "${env("WSUS_GROUP")}"
}


# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "qemu" "autogenerated_1" {
  accelerator      = "kvm"
  boot_wait        = "6m"
  communicator     = "winrm"
  disk_cache       = "unsafe"
  disk_interface   = "virtio-scsi"
  disk_size        = "20480"
  floppy_files     = ["answer_files/qemu/2019/Autounattend.xml", "scripts/bootstrap-win.ps1", "ISO/NetKVM/2k19/amd64/netkvm.cat", "ISO/NetKVM/2k19/amd64/netkvmco.dll", "ISO/NetKVM/2k19/amd64/readme.doc", "ISO/NetKVM/2k19/amd64/netkvm.sys", "ISO/NetKVM/2k19/amd64/netkvm.inf", "ISO/vioscsi/2k19/amd64/vioscsi.sys", "ISO/vioscsi/2k19/amd64/vioscsi.inf", "ISO/vioscsi/2k19/amd64/vioscsi.cat", "ISO/viostor/2k19/amd64/viostor.cat", "ISO/viostor/2k19/amd64/viostor.inf", "ISO/viostor/2k19/amd64/viostor.sys"]
  format           = "qcow2"
  headless         = true
  iso_checksum     = "70fec2cb1d6759108820130c2b5496da"
  iso_urls         = ["ISO/17763.737.190906-2324.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us_1.iso", "https://software-download.microsoft.com/download/pr/17763.737.190906-2324.rs5_release_svc_refresh_SERVER_EVAL_x64FRE_en-us_1.iso"]
  net_device       = "virtio-net"
  output_directory = "VM/Win2019-qemu"
  qemuargs         = [["-usbdevice", "tablet"], ["-m", "${var.memory}"], ["-cpu", "${var.cpu}"], ["-smp", "cpus=${var.cpus}"]]
  shutdown_command = "c:/Windows/Temp/shutdown_command.bat"
  shutdown_timeout = "30m"
  skip_compaction  = "false"
  vm_name          = "2019.qcow2"
  vnc_bind_address = "${var.vnc_bind_address}"
  winrm_password   = "packer"
  winrm_port       = "5985"
  winrm_timeout    = "4h"
  winrm_username   = "Administrator"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.qemu.autogenerated_1"]

  provisioner "file" {
    destination = "C:/Windows/Temp/SetupComplete.ps1"
    source      = "scripts/SetupComplete-qemu.ps1"
  }

  provisioner "file" {
    destination = "C:/Windows/Temp/cloudbase-init.conf"
    source      = "cloud_init/cloudbase-init.conf"
  }

  provisioner "file" {
    destination = "C:/Windows/Temp/cloudbase-init-unattend.conf"
    source      = "cloud_init/cloudbase-init-unattend.conf"
  }

  provisioner "file" {
    destination = "C:/Windows/Temp/cloudbase-init-firstboot.ps1"
    source      = "cloud_init/cloudbase-init-firstboot.ps1"
  }

  provisioner "powershell" {
    elevated_password = "packer"
    elevated_user     = "administrator"
    remote_path       = "c:/Windows/temp/cloudbase-init.ps1"
    script            = "scripts/cloudbase-init.ps1"
  }

  provisioner "powershell" {
    elevated_password   = "packer"
    elevated_user       = "administrator"
    remote_path         = "c:/Windows/temp/configure-win.ps1"
    script              = "scripts/configure-win.ps1"
  }

  provisioner "powershell" {
    elevated_password   = "packer"
    elevated_user       = "administrator"
    remote_path         = "c:/Windows/temp/cleanup-compact.ps1"
    script              = "scripts/cleanup-compact.ps1"
  }

  #provisioner "powershell" {
  #  elevated_password   = "packer"
  #  elevated_user       = "administrator"
  #  remote_path         = "c:/Windows/temp/configure-windows-local-policy.ps1"
  #  script              = "scripts/configure-windows-local-policy.ps1"
  #}

  provisioner "windows-update" {
    max_retries = 3 # Fight against flaky Windows Updates
  }

  provisioner "powershell" {
    elevated_password = "packer"
    elevated_user     = "administrator"
    inline            = [
      "get-childitem -Recurse \"C:/Windows/Panther\" | remove-item -Recurse -Force -ErrorAction SilentlyContinue"
    ]
    remote_path       = "c:/Windows/temp/clean_panther.ps1"
  }

  provisioner "powershell" {
    elevated_password = "packer"
    elevated_user     = "administrator"
    inline            = [
      "get-childitem -Recurse \"C:/Windows/Temp\" | remove-item -Recurse -Force -ErrorAction SilentlyContinue"
    ]
    remote_path       = "c:/Windows/temp/clean_temp.ps1"
  }

  provisioner "powershell" {
    elevated_password = "packer"
    elevated_user     = "administrator"
    inline            = [
      "start-process powershell -argumentlist \"Get-ScheduledTask | Where TaskPath -eq '\\' | Unregister-ScheduledTask -Confirm:`$false\""
    ]
    remote_path       = "c:/Windows/temp/purge_tasks.ps1"
  }

  provisioner "file" {
    destination = "C:/Windows/Temp/shutdown_command.bat"
    source      = "scripts/shutdown_command.bat"
  }
}
